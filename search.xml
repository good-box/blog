<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>谷歌云搭建v2ray</title>
      <link href="/2020/03/31/%E8%B0%B7%E6%AD%8C%E4%BA%91%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2020/03/31/%E8%B0%B7%E6%AD%8C%E4%BA%91%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id><a href="#" class="headerlink" title></a></h2><h2 id="1-GCP创建VM实例"><a href="#1-GCP创建VM实例" class="headerlink" title="1. GCP创建VM实例"></a>1. GCP创建VM实例</h2><pre><code>Computer Engine→VM实例→创建实例sudo -ipasswd bash &lt;(curl -s -L https://233v2.com/v2ray.sh)2. 打开VM实例SSH页3.创建防火墙规则    VPC网络→防火墙规则→创建防火墙规则</code></pre><a id="more"></a><h2 id="谷歌云设置ROOT用户以及允许第三方SSH登录"><a href="#谷歌云设置ROOT用户以及允许第三方SSH登录" class="headerlink" title="谷歌云设置ROOT用户以及允许第三方SSH登录"></a>谷歌云设置ROOT用户以及允许第三方SSH登录</h2><p>sed -i ‘s/PermitRootLogin no/PermitRootLogin yes/g’ /etc/ssh/sshd_config<br>sed -i ‘s/PasswordAuthentication no/PasswordAuthentication yes/g’ /etc/ssh/sshd_config</p><p>reboot</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>其他</title>
      <link href="/2019/11/28/%E5%85%B6%E4%BB%96/"/>
      <url>/2019/11/28/%E5%85%B6%E4%BB%96/</url>
      
        <content type="html"><![CDATA[<p>1.var delt = this.delImg.map(function (value) {<br>      let str = BASEURL + ‘/static/‘<br>      return value.replace(str, “”);<br>    });</p><a id="more"></a><p>   替换文本</p><p>2.(?&lt;=upimages).*</p><p>  (?=upimages).*</p><p>  表名.*update     （正则文本）</p><p>  var substr = res.data.match(/(?=upimages).*/)[0];</p><p>3.src.splice(index, 1);     去除数组的某一项</p><p>4.delt.join(‘,’);     数组分隔成字符串</p><p>5.JSON.parse(res.data);    json字符转换</p><p>6.continue语句的作用是跳过本次循环体中余下尚未执行的语句，立即进行下一次的循环条件判定，可以理解为仅结束本次循环。</p><p>break：</p><p>(1).结束当前整个循环，</p><p>7.js数组与字符串的相互转换<br>一、数组转字符串</p><p>需要将数组元素用某个字符连接成字符串，示例代码如下：</p><p>var a, b,c;<br>a = new Array(a,b,c,d,e);<br>b = a.join(‘-‘); //a-b-c-d-e  使用-拼接数组元素<br>c = a.join(‘’); //abcde</p><p>二、字符串转数组</p><p>实现方法为将字符串按某个字符切割成若干个字符串，并以数组形式返回，示例代码如下：</p><p>var str = ‘ab+c+de’;<br>var a = str.split(‘+’); // [ab, c, de]<br>var b = str.split(‘’); //[a, b, +, c, +, d, e]</p><p>8.数据库 like 查询  <a href="https://www.runoob.com/mysql/mysql-like-clause.html" target="_blank" rel="noopener">https://www.runoob.com/mysql/mysql-like-clause.html</a><br>  ‘%a’     //以a结尾的数据<br>‘a%’     //以a开头的数据<br>‘%a%’    //含有a的数据<br>‘<em>a</em>‘    //三位且中间字母是a的<br>‘<em>a’     //两位且结尾字母是a的<br>‘a</em>‘     //两位且开头字母是a的</p><ol start="9"><li>JS-向数组指定位置添加元素</li></ol><ol start="10"><li>jenkins 代码发布工具<br>composer  php 包依赖管理工具</li></ol><p>11、一楼就不要来误导群众了，fork的意思是从别人的代码库中复制一份到你自己的代码库，与普通的复制不同，fork包含了原有库中的所有提交记录，fork后这个代码库是完全独立的，属于你自己，你可以在自己的库中做任何修改，当然也可以通过Pull Request向原来的库提交合并请求。</p><p>顺便说一下Watch和Star：</p><p>Watch，就是一楼说的关注，关注后，代码库中有新的commit你都会收到通知；</p><p>Star，与watch不同，star相当于收藏，你可以方便地找到你star过的库，但是不会收到关于那个库的任何通知。</p><ol start="12"><li>webhook  (gig勾子) </li></ol><?php$cmd = "cd  /www/wwwroot/open.youshicloud.com/  && git reset --hard origin/master && sudo git pull origin master && sudo git pull --all && sudo git pull origin master  2>&1";//$cmd = "cd  /www/wwwroot/open.youshicloud.com/  && git pull &&sudo git pull --all && sudo git pull origin master 2>&1";$res = array();exec($cmd,$res);var_dump($res);13.window.location.href='http://www.baidu.com';     跳转页面  window.location.reload();  刷新页面旧的复制过来请求地址：http://www.house.com/admin/base/login?username=admin&password=123456"authKey": "880b2281c1b3fe8ae8d2b91f8ad7359a", "sessionId": "8f6e4pp5b8u0tpbe99f7tluur4",http://www.house.com/admin/users/enables#旧的写法git reset --hard origin/pt   #旧的写法git pull origin pt   拉取远程分支ptgit branch wsw         创建分支wswgit checkout wsw     切换分支wswgit branch -D pt        删除分支ptgit checkout -t origin/pt    切换远程分支ptgit branch -D wsw 删除分支wsw1. 本地php 路径 D:\mydev\phpstudy\PHPTutorial\php\php-7.0.12-nts\php.exe2. 日志 （tp5)use think\Log;Log::record($log, 'info');3. 日志 （微擎外卖） load()->func('logging'); logging_run('ygy@'.$appid.'@1'.$openid.'@2'.$mch_id.'@3'.$key.'@4'.$out_trade_no.'@5'.$body.'@6'.$total_fee.'@7'.$root.'@8');3. src="data:image/png;base64,"4. 请求地址  https://cs.say52.cn/api/Wxapps/doPageOrderCode5. $_W 获取前端传的参数6. serialize($hxinfo) 可以转成json字符7. 员工表加个字段，，，是否为核销员8. 关联表，左关联，右关联，，，，，通过一张表的一个字段关联另一张表（避免修改多张表）9. hxmm  核销密码调的方法          ims_sudu8_page_pt_pro   拼团商品表      ims_sudu8_page_pt_share  拼团状态表   ims_sudu8_page_staff     员工表   ims_sudu8_page_pt_order   拼团状态表   ims_sudu8_page_user     授权用户表10. return $this->fetch(staffadd);    返回对应的哪个页面11. <? ?><p>是短标签<br><?php ?>是长标签<br>在php的配置文件（php.ini）中有一个short_open_tag的值，开启以后可以使用PHP的短标签：<? ?><br>同时，只有开启这个才可以使用 <?= 以代替 <? echo 。在CodeIgniter的视频教程中就是用的这种方式。但是这个短标签是不推荐的，使用<?php ?>才是规范的方法。只是因为这种短标签使用的时间比较长，这种特性才被保存了下来。</p><ol start="12"><li>当文件是PHP代码和HTML代码混合的时候，PHP结束标签?&gt;不允许省略<br>当文件是纯PHP代码的时候，不建议使用结束标签?&gt;，理由有：</li></ol><p>可以避免在 PHP 结束标记之后万一意外加入了空格或者换行符，会导致 PHP 开始输出这些空白，<br>影响最多的时候应该是在使用 include 和 require的时候，加了结束标签如果又在后面加了空格都有可能会引起多余的输出、php错误、之后的输出无法显示、空白页，<br>忽略结束标签不仅能少些两个字符，还能让我们的开发更顺利。</p><ol start="13"><li><p>phpstorm 调试总是断点在index.php的第一行<br>点击菜单Run，在弹出菜单中取消勾选“Break at first line in PHP scripts”</p></li><li><p>Xdebug helper    （phpstrom调试）<br>F8 一行行调试<br>F9 跳到下个断点<br>F7 跳到下个方法<br>ctrl + F8  跳出当前方法</p></li></ol><ol start="15"><li>git 强制写入帐号密码：<a href="http://ygy:ygy@116.255.174.19:3000/wsw/open.youshicloud.com.git" target="_blank" rel="noopener">http://ygy:ygy@116.255.174.19:3000/wsw/open.youshicloud.com.git</a></li></ol><ol start="16"><li><p>git log</p><p>git reset xxx</p><p>git pull –all</p></li></ol><ol start="17"><li><p>php事务<br>Db::startTrans();</p><pre><code>try{    $res= Db::name(&apos;member&apos;)-&gt;where(&apos;member_id&apos;,&apos;=&apos;,$member_id)-&gt;update($data);    if(!$res){        throw new \Exception(&quot;修改代理用户失败&quot;);    }    Db::table(&apos;ims_admin&apos;)-&gt;where(&apos;uid&apos;,&apos;=&apos;, $api_uid)-&gt;update($data1);    Db::commit();}catch (\Exception $e){    $this-&gt;error(&apos;操作失败&apos;,null,101);    Db::rollback();}</code></pre></li><li><p>isset()<br>格式：bool isset ( mixed var [, mixed var [, …]] )<br>返回值：<br>若变量不存在则返回 FALSE<br>若变量存在且其值为NULL，也返回 FALSE<br>若变量存在且值不为NULL，则返回 TURE<br>同时检查多个变量时，每个单项都符合上一条要求时才返回 TRUE，否则结果为 FALSE<br>更多说明：<br>使用 unset() 释放变量之后，它将不再是 isset()。<br>PHP函数isset()只能用于变量，传递任何其它参数都将造成解析错误。<br>检测常量是否已设置可使用 defined() 函数。</p></li></ol><p>empty()<br>格式：bool empty ( mixed var )<br>返回值：<br>若变量不存在则返回 TRUE<br>若变量存在且其值为””、0、”0”、NULL、、FALSE、array()、var $var; 以及没有任何属性的对象，则返回 TURE<br>若变量存在且值不为””、0、”0”、NULL、、FALSE、array()、var $var; 以及没有任何属性的对象，则返回 FALSE<br>更多说明：<br>empty()的返回值=!(boolean) var，但不会因为变量未定义而产生警告信息。参见转换为布尔值获取更多信息。<br>empty() 只能用于变量，传递任何其它参数都将造成Paser error而终止运行。<br>检测常量是否已设置可使用 defined() 函数。</p><p>empty() 和 isset() 虽然都是变量处理函数，它们都用来判断变量是否已经配置，它们却是有一定的区别：empty还会检测变量是否为空、为零。当一个变量值为0，empty() 认为这个变量同等于空，即相当于没有设置。<br>比如检测 $id 变量，当 $id=0 时，用empty() 和 isset() 来检测变量 $id 是否已经配置，两者将返回不同的值—— empty() 认为没有配置，isset() 能够取得 $id 的值。</p><ol start="19"><li>php代码拼接<?php if(isset($val['link'])){ ?><pre><code>     &lt;a target=&quot;_blank&quot; href=&quot;&lt;?php echo url(&apos;admin/&apos;.$val[&apos;link&apos;]); ?&gt;&quot;&gt;&lt;?php echo $val[&apos;name&apos;]; ?&gt;&lt;/a&gt;&lt;?php }else{ echo $val[&apos;name&apos;]; } ?&gt;</code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>layer弹出层常用</title>
      <link href="/2019/11/28/layer%E5%BC%B9%E5%87%BA%E5%B1%82%E5%B8%B8%E7%94%A8/"/>
      <url>/2019/11/28/layer%E5%BC%B9%E5%87%BA%E5%B1%82%E5%B8%B8%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="layer弹出层常用"><a href="#layer弹出层常用" class="headerlink" title="layer弹出层常用"></a>layer弹出层常用</h2><ol><li><p>layer.confirm(‘一个月只能申请5次修改\n’ +</p><pre><code>        &apos;审核将会在7个工作日内完成，请确认是否提交修改申请？&apos;, {    btn: [&apos;确定&apos;,&apos;取消&apos;], //按钮    title:&apos;提示&apos;,}, function(){     console.log(&apos;点了确定&apos;);    layer.msg(&apos;修改成功&apos;, {icon: 1,time:1500,end:function () {        // window.location.href=&quot;&lt;?=url(&apos;miniapp/index&apos;)?&gt;&quot;;    //跳转到指定页面        window.location.reload();  // 刷新页面       }});   layer.msg(info, {icon: 2,time:1800});</code></pre></li></ol><a id="more"></a><pre><code>}, function(){    layer.closeAll();   // 关闭弹窗});</code></pre><ol start="2"><li>icon  1 打勾,2 打叉。</li></ol><ol start="3"><li>layer.msg(‘请先输入功能介绍’);      //没有带icon的msg，是灰色透明的弹窗</li></ol><ol start="4"><li>layer.alert(‘测试’);    // 带头部和确认的弹窗           </li></ol><ol start="5"><li>layer.msg(‘提示内容’, {icon: 2,time:1800});     //默认是2秒关闭。 没带确认键的弹窗</li></ol><ol start="6"><li>layer.alert(‘一次只能添加一个类目’,{title:’提示’});     // 带头部和确认的弹窗，自定义title</li></ol><ol start="7"><li><p>var index = layer.load(0, {shade: false}); //0代表加载的风格，支持0-2</p></li><li><p>layer.load(0, {shade: [0.1,’#fff’]}); //0代表加载的风格，支持0-2    有透明层不能点击</p></li><li><p>layer.closeAll(‘loading’);   // 关闭加载框</p></li></ol><ol start="10"><li><p>弹窗中加入代码</p><p>layer.open({</p><pre><code>type: 1,title: &apos;打印预览&apos;,skin: &apos;layui-layer-rim&apos;, //加上边框area: [&apos;726px&apos;, &apos;595px&apos;], //宽高content: $(this).siblings(&apos;.print_box&apos;)</code></pre><p>   })</p></li></ol><ol start="11"><li><p>//iframe窗   </p></li></ol><p>layer.open({<br>  type: 2,           //type=2是打开页面地址，type=1是打开html标签<br>  title: false,<br>  closeBtn: 0, //不显示关闭按钮<br>  shade: [0],<br>  area: [‘340px’, ‘215px’],<br>  offset: ‘rb’, //右下角弹出<br>  time: 2000, //2秒后自动关闭<br>  anim: 2,<br>  content: [‘test/guodu.html’, ‘no’], //iframe的url，no代表不显示滚动条<br>  end: function(){ //此处用于演示</p><p>  }<br>});</p><p>layer.open({<br>      type: 1,<br>      title: ‘很多时候，我们想最大化看，比如像这个页面。’,<br>      shadeClose: true,    // 点击蒙层是否可关闭<br>      shade: false,   //背景蒙层，0.4<br>      maxmin: true, //开启最大化最小化按钮<br>      area: [‘893px’, ‘600px’],<br>      content: ‘//fly.layui.com/‘      // 或 $(‘#content’)<br>    });</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> layer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql常用</title>
      <link href="/2019/11/28/mysql%E5%B8%B8%E7%94%A8/"/>
      <url>/2019/11/28/mysql%E5%B8%B8%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql常用小记"><a href="#mysql常用小记" class="headerlink" title="mysql常用小记"></a>mysql常用小记</h2><p>删除表的记录<br>DELETE from ims_sudu8_page where openid = ‘xxxx’</p><a id="more"></a><p>SELECT * from ims_cjdc_goods WHERE store_id = 3</p><p>update ims_sudu8_page_food set uniacid=’666666’ where id&lt;30;</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/2019/11/28/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/11/28/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><p>删除远端分支：<br>git push origin –delete dev_ygy</p><a id="more"></a><p>注：先add文件，在commit提交<br>1.$ git add file1.txt<br>  $ git add file2.txt file3.txt      1次add多个文件<br>  $ git commit -m “add 3 files.”git add 文件</p><p>方法一 git add 添加多个文件，文件之间以空格隔开</p><p>git add file1 file2 file3</p><p>方法二 多次git add</p><p>git add file1<br>git add file2<br>git add file2</p><p>方法三 添加指定目录下的文件<br>config目录下及子目录下所有文件，home目录下的所有.php文件</p><p>git config/*<br>git home/*.php</p><p>方法四 git add . 添加所有的文件， 或者 git add –all 添加所有的文件</p><p>git add .<br>git add –all</p><p>git add 文件夹<br>git add 文件夹名</p><hr><ol><li><p>git status命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，readme.txt被修改过了，但还没有准备提交的修改。<br>虽然Git告诉我们readme.txt被修改了，但如果能看看具体修改了什么内容，自然是很好的。比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的readme.txt，所以，需要用git diff这个命令看看：</p><p>git status  改了哪些文件<br>git diff    改动了什么具体内容</p></li><li><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset –hard commit_id。</p></li></ol><p>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。</p><p>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。</p><ol start="3"><li>$ git checkout – readme.txt      可以丢弃工作区的修改：</li><li>git checkout – file命令中的–很重要，没有–，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。</li></ol><ol start="5"><li>git branch -a     查看所有远程分支</li></ol><hr><h1 id="1-为避免冲突需要先同步下远程仓库"><a href="#1-为避免冲突需要先同步下远程仓库" class="headerlink" title="1.为避免冲突需要先同步下远程仓库"></a>1.为避免冲突需要先同步下远程仓库</h1><pre><code>git pull</code></pre><h1 id="2-在本地项目目录下删除缓存"><a href="#2-在本地项目目录下删除缓存" class="headerlink" title="2.在本地项目目录下删除缓存"></a>2.在本地项目目录下删除缓存</h1><pre><code>git rm -r --cached .</code></pre><h1 id="3-再次add所有文件"><a href="#3-再次add所有文件" class="headerlink" title="3.再次add所有文件"></a>3.再次add所有文件</h1><p>输入以下命令，再次将项目中所有文件添加到本地仓库缓存中</p><pre><code>git add .</code></pre><h1 id="4-添加commit，提交到远程库"><a href="#4-添加commit，提交到远程库" class="headerlink" title="4.添加commit，提交到远程库"></a>4.添加commit，提交到远程库</h1><p>git commit -m “filter new files”</p><pre><code>git push</code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js获取当前时间戳</title>
      <link href="/2019/11/28/js%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E6%88%B3/"/>
      <url>/2019/11/28/js%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E6%88%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="js获取当前时间戳的方法"><a href="#js获取当前时间戳的方法" class="headerlink" title="js获取当前时间戳的方法"></a>js获取当前时间戳的方法</h2><p>第一种方法：</p><p>var timestamp = Date.parse(new Date());<br>结果：1280977330000<br>第二种方法：</p><a id="more"></a><p>var timestamp = (new Date()).valueOf();<br>结果：1280977330748</p><p>第三种方法：</p><p>var timestamp=new Date().getTime()；<br>结果：1280977330748</p><p>第一种：获取的时间戳是把毫秒改成000显示，</p><p>第二种和第三种是获取了当前毫秒的时间戳。</p><h2 id="获取当前系统时间"><a href="#获取当前系统时间" class="headerlink" title="获取当前系统时间"></a>获取当前系统时间</h2><p>Js获取当前系统时间</p><p>var myDate = new Date();<br>myDate.getYear();        //获取当前年份(2位)<br>myDate.getFullYear();    //获取完整的年份(4位,1970-????)<br>myDate.getMonth();       //获取当前月份(0-11,0代表1月)<br>myDate.getDate();        //获取当前日(1-31)<br>myDate.getDay();         //获取当前星期X(0-6,0代表星期天)<br>myDate.getTime();        //获取当前时间(从1970.1.1开始的毫秒数)<br>myDate.getHours();       //获取当前小时数(0-23)<br>myDate.getMinutes();     //获取当前分钟数(0-59)<br>myDate.getSeconds();     //获取当前秒数(0-59)<br>myDate.getMilliseconds();    //获取当前毫秒数(0-999)<br>myDate.toLocaleDateString();     //获取当前日期<br>var mytime=myDate.toLocaleTimeString();     //获取当前时间<br>myDate.toLocaleString( );        //获取日期与时间</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php启动报错Call to undefined function mysql_connect()</title>
      <link href="/2019/11/16/php%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99Call%20to%20undefined%20function%20mysql_connect()/"/>
      <url>/2019/11/16/php%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99Call%20to%20undefined%20function%20mysql_connect()/</url>
      
        <content type="html"><![CDATA[<h2 id="php项目启动报错Fatal-error-Uncaught-Error-Call-to-undefined-function-mysql-connect"><a href="#php项目启动报错Fatal-error-Uncaught-Error-Call-to-undefined-function-mysql-connect" class="headerlink" title="php项目启动报错Fatal error: Uncaught Error: Call to undefined function mysql_connect()"></a>php项目启动报错Fatal error: Uncaught Error: Call to undefined function mysql_connect()</h2><a id="more"></a><ol><li><p>首先是应该确认下自己使用的php的版本。如果是7.x版本，你应该使用mysqli_connect()，因为在7.x版本中已经舍弃了mysql_connect()，或者你可以使用pdo。当然5.x版本mysql_connect()和mysqli_connect()是都可以用的。</p></li><li><p>如果第一步没有成功，你可以做如下操作：</p><p>（1）5.x版本：打开php.ini(记事本或者文本编辑器都可以)，查找mysql，找到extension=php_mysqli.dll 和 extension=php_mysql.dll，把前面的 ‘;’ 去掉。（7.x版本的话只需去掉extension=php_mysqli.dll前的’;’ ，而且你发现根本没有extension=php_mysql.dll，因为它已经被舍弃了）</p><p>（2）然后查找extension_dir = “ext”，同样把前面的 ‘;’ 去掉，5.x和7.x一样。</p><p>（3）然后重启Apache即可。</p></li></ol><p>本地是7.x的版本导致</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客</title>
      <link href="/2019/11/14/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/11/14/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="主要分为"><a href="#主要分为" class="headerlink" title="主要分为"></a>主要分为</h2><ol><li><h3 id="静态-Hexo-Jekyll-Octopress-可以部署在github-pages上"><a href="#静态-Hexo-Jekyll-Octopress-可以部署在github-pages上" class="headerlink" title="静态 Hexo/Jekyll/Octopress 可以部署在github pages上"></a>静态 Hexo/Jekyll/Octopress 可以部署在github pages上</h3></li><li><h3 id="动态-Ghost、Wordpress"><a href="#动态-Ghost、Wordpress" class="headerlink" title="动态 Ghost、Wordpress"></a>动态 Ghost、Wordpress</h3><a id="more"></a><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2></li><li><p>动态博客的优点</p><ul><li>最后，也列举一下 Ghost 的优点，或许大点的团队更适合它。</li><li>设计感超好的免费、付费模板一大把，比起来，Hexo 的模板像是上个世纪的</li><li>SEO 功能完善，在设计之初就把 SEO 考虑在内的博客系统并不多见</li><li>功能强大很多，GitHub 上 commits 是 Hexo 的 4 倍，功能至少多一倍吧</li><li>社区更活跃，几乎每天都有大量代码提交</li><li>有良好的商业模式支撑，开发、维护的生命期可以更久</li></ul></li><li><p>静态博客的优点</p><ul><li>说实话，Ghost的模板很多都特别有设计感，而且对SEO特别友善，但是出于以下几点考虑，就还是选择了Hexo</li><li>静态博客可以托管第三方，如 Github Pages 和 Coding Pages，节省打理服务器时间</li><li>自然也节省了服务器开销</li><li>不用自己做备份，用git管理文档也更容易回溯历史版本</li><li>静态页面，即使第三方停止服务，也方便找到新的地方部署，不用打包数据库，折腾配置，再迁移到新服务器</li><li>很多人买主机都是讲年的，说不定哪天就忘了，又懒得写，一年打不开都没发现</li><li>最终选择Hexo</li></ul></li></ol><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br><span class="line">2.换个主题</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ <span class="built_in">cd</span> theme</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/WeicMa/Hexo-Theme-Life themes/life</span><br><span class="line">$ <span class="built_in">cd</span> themes/huxblog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h2 id="主题修改配置"><a href="#主题修改配置" class="headerlink" title="主题修改配置"></a>主题修改配置</h2><ul><li>根据你下载的主题名进行修改，主题需放到themes目录</li><li>修改blog根目录下的 _config.yml ： theme: life</li></ul><h2 id="部署代码到Github"><a href="#部署代码到Github" class="headerlink" title="部署代码到Github"></a>部署代码到Github</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span><br><span class="line"></span><br><span class="line">$ hexo clean</span><br><span class="line">2.生成静态文件</span><br><span class="line"></span><br><span class="line">$ hexo generate</span><br><span class="line">3.部署</span><br><span class="line"></span><br><span class="line">$ hexo deploy</span><br><span class="line">上面2、3两个命令可以合起来</span><br><span class="line"></span><br><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure><hr><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li><h3 id="hexo-d-报错：ERROR-Deployer-not-found-git"><a href="#hexo-d-报错：ERROR-Deployer-not-found-git" class="headerlink" title="$ hexo d 报错：ERROR Deployer not found: git"></a>$ hexo d 报错：ERROR Deployer not found: git</h3></li></ol><ul><li>npm install –save hexo-deployer-git<br>要先执行下 npm install –save hexo-deployer-git</li></ul><ol start="2"><li><h4 id="hexo-d-每次发布后都需要手动在-github-page-的-setting-里重新设置自定义域名，才能访问网站。"><a href="#hexo-d-每次发布后都需要手动在-github-page-的-setting-里重新设置自定义域名，才能访问网站。" class="headerlink" title="$hexo d 每次发布后都需要手动在 github page 的 setting 里重新设置自定义域名，才能访问网站。"></a>$hexo d 每次发布后都需要手动在 github page 的 setting 里重新设置自定义域名，才能访问网站。</h4></li></ol><ul><li>原因：每次 push，CNAME 都被删掉了，在 hexo 的 source 目录建一个 CNAME，里面写你的域名，这样每次生成的时候就会自带这个文件了。</li></ul><p>转：<a href="https://www.jianshu.com/p/75989cd399a6" target="_blank" rel="noopener">https://www.jianshu.com/p/75989cd399a6</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇文章，这是标题吗？</title>
      <link href="/2019/11/11/hello-world/"/>
      <url>/2019/11/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><h1 id="我是井加井"><a href="#我是井加井" class="headerlink" title="我是井加井"></a>我是井加井</h1><h1 id="我是一个井"><a href="#我是一个井" class="headerlink" title="我是一个井"></a>我是一个井</h1><h2 id="我是2个井"><a href="#我是2个井" class="headerlink" title="我是2个井"></a>我是2个井</h2><h3 id="我是3个井"><a href="#我是3个井" class="headerlink" title="我是3个井"></a>我是3个井</h3><h4 id="我是4个井"><a href="#我是4个井" class="headerlink" title="我是4个井"></a>我是4个井</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i am code</span><br><span class="line"></span><br><span class="line">code change</span><br></pre></td></tr></table></figure><p>我没有井<br><a href="https://www.baidu.com" target="_blank" rel="noopener">我是链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
